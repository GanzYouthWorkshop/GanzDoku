function parse(src)
{
	//Pre-parse formatting
	//--------------------
	var tmp = src + '\n\n';
	tmp = tmp.replace("\r", "");
	
	
	//===================
	//Line-scope elements
	//===================
	
	//Headers
	//-------
	tmp = tmp.replace(/^(#{1,5})(@?) *(.+) *(#{1,5})?$/img, function(m, p1, p2, p3, a, b)
	{
		var type = p2 == "" ? "" : "class='numbered'";
		return "<h"+p1.length+" "+type+">"+p3+"</h"+p1.length+">";
	});
	tmp = tmp.replace(/(@?) *(.+)\n(-|=){3,}/ig, function(m, p1, p2, p3, a, b)
	{
		var i = p3 == "=" ? 1 : 2;
		var type = p1 == "" ? "" : "class='numbered'";
		return "<h"+i+" "+type+">"+p2+"</h"+i+">";
	});
	
	//Emphasis
	//--------
	tmp = tmp.replace(/\*{3}(.+?)\*{3}/img, "<strong><em>\$1</em></strong>");
	tmp = tmp.replace(/\*{2}(.+?)\*{2}/img, "<strong>\$1</strong>");
	tmp = tmp.replace(/\*(.+?)\*/img, "<em>\$1</em>");
	//tmp = tmp.replace(/\___(.+?)\___/img, "<strong><em>\$1</em></strong>");
	//tmp = tmp.replace(/\__(.+?)\__/img, "<strong>\$1</strong>");
	//tmp = tmp.replace(/\_(.+?)\_/img, "<em>\$1</em>");
	tmp = tmp.replace(/\~{2,}(.+?)\~{2,}/img, "<del>\$1</del>");
	
	//Horizontal lines
	//----------------
	tmp = tmp.replace(/^(-|\*|_){3,}$/img, "<hr>");
	
	
	//===================
	//Links and images
	//===================
	
	//Indirect URL references
	//-----------------------
	var refs = {};
	tmp = tmp.replace(/^ *\[(.+)\] ?: ?([^\n"]+) ?("(.+)")?$/img, function(m, p1, p2, p3, p4, a, b)
	{
		refs[p1] = {'url': p2, 'title': p4}; return ""; 
	});
	
	//Direct-URL links and images
	//---------------------------
	tmp = tmp.replace(/(\!?)\[(.+)\] ?(\()(.+?) ?("(.+)")?\)/ig, urlParse);
	
	//Indirect-URL links and images
	//-----------------------------
	tmp = tmp.replace(/(\!?)\[(.+)\] ?(\[)(.+)()()\]/ig, urlParse);

	//Combined link parser
	//--------------------
	function urlParse(m, p1, p2, p3, p4, p5, p6, a, b)
	{
		var c = p2;
		if(p3 == '('){ var l = p4; var t = "title='"+p6+"'"; }
		else         { var l = refs[p4].url; var t = "title='"+refs[p4].title+"'"; }
		
		if(p1 == ""){ /* Link */ return "<a href='"+l+"' "+t+">"+c+"</a>"; }
		else        { /* Image */ return "<img src='"+l+"' alt='"+c+"' "+t+">"; }
	}
	
	
	//====================
	//Block-scope elements
	//====================
	
	//Blockquotes
	//-----------
	tmp = tmp.replace(/^((> |&gt; )+)(.+)$/img, function(m, p1, p2, p3, a, b)
	{
		var l = p1.replace(/&gt;/ig, ">").length / 2;
		var result = '';
		for(var i = 0; i < l; i++){ result += '<blockquote>'; }
		result += p3;
		for(var i = 0; i < l; i++){ result += '</blockquote>'; }
		return result;
	});
	for(var i = 0; i < 10; i++)
	{
		tmp = tmp.replace(/<\/blockquote>(\n?)<blockquote>/g, " ");
	}
	
	//Equations
	//---------
	tmp = tmp.replace(/%%((.|[\n])+?)%%/img, function(m, p1, p2, p3, a, b)
	{
		var p = p1.replace(/(\n| )+/g, '&space;');
		return "<img class='equation' src='http://latex.codecogs.com/gif.download?\\dpi{130}"+p+"' alt='Equation generated by CodeCogs' title='Equation'>";
	});
	
	//Tables
	//------
	tmp = tmp.replace(/\+-[-\+]* *\+((.|[\n])+?)\+-[-\+]* *\+ *\n *\n/ig, function(m, p1, a, b)
	{
		var result = m.replace(/(.+)\n\+=[=\+]*\+/ig, "<pp:head>\$1</pp:head>\n+---+\n");
		
		result = result.replace(/^ *\|/img, "<td>");
		result = result.replace(/\| *$/img, "</td>");
		result = result.replace(/\|/g, "</td><td>");
		
		result = result.replace(/^ *\+-[-\+]* *\+$/img, "</tr><tr>");
		
		result = result.replace(/<pp:head> *<\/td>/, "<pp:head>");
		result = result.replace(/<td> *<\/pp:head>/, "</pp:head>");
		result = result.replace(/<pp:head>((.|[\n])+)<\/pp:head>/ig, function(m, p1, a, b)
		{
			return "<tr>" + p1.replace(/<td>/g, "<th>").replace(/<\/td>/g, "</th>") + "</tr>";
		});
		
		result = "<table><tr>"+result+"</tr></table>";
		result = result.replace(/<tr>\n*<\/tr>/ig, "");
		
		return result;
	});
	
	
	//=====
	//Lists
	//=====
	
	//List items
	//----------
	tmp = tmp.replace(/^((- |\* |\+ )+) *(.+)$/img, parseList);
	tmp = tmp.replace(/^((\d+. )+) *(.+)$/img, parseList);

	//List margins
	//------------
	tmp = tmp.replace(/<pp:li-u>((.|(?!\n\n)[\n])+)<\/pp:li-u>\n/ig, function(m, p1, p2, a, b)
	{
		return "<ul>"+m.replace(/<pp:li-u>/ig, "<li>").replace(/<\/pp:li-u>/ig, "</li>")+"</ul>";
	});
	tmp = tmp.replace(/<pp:li-o>((.|(?!\n\n)[\n])+)<\/pp:li-o>\n/ig, function(m, p1, p2, a, b)
	{
		return "<ol>"+m.replace(/<pp:li-o>/ig, "<li>").replace(/<\/pp:li-o>/ig, "</li>")+"</ol>";
	});
	tmp = tmp.replace(/<li><\/li>/ig, "");
	
	//Combined list parser
	//--------------------
	function parseList(m, p1, p2, p3, a, b)
	{
		var t = p2.length == 2 ? 'u' : 'o';
		var l = p1.length / 2;
		var result = '';
		for(var i = 0; i < l; i++){ result += '<pp:li-'+t+'>'; }
		result += p3;
		for(var i = 0; i < l; i++){ result += '</pp:li-'+t+'>'; }
		return result;
	}
	
	
	//=========================
	//Linebreaks and paragraphs
	//=========================
	//TODO
	tmp = tmp.replace(/\n/ig, '<br>');
	tmp = tmp.replace(/(<br>){3,}/ig, '<br/>');
	tmp = tmp.replace(/<\/li><br>/ig, '</li>');
	return tmp;
}